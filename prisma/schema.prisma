// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

enum UserRole {
    ADMIN
    USER
}

model BlogPost {
    id        Int      @id @default(autoincrement())
    title     String
    language  String   @default("en")
    slug      String   @unique
    published Boolean  @default(false)
    content   String
    keywords  String[]
    asPageOwner Boolean  @default(false)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([title])
    @@index([language, slug])
}

model Page {
    id        Int      @id @default(autoincrement())
    title     String
    language  String   @default("en")
    slug      String   @unique
    published Boolean  @default(false)
    content   String
    keywords  String[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([title])
    @@index([language, slug])
}
// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Plan {
    FREE
    PREMIUM
}

model User {
    id            String    @id @default(cuid())
    name          String?
    username      String?   @unique
    bio           String?
    location      String?
    website       String?
    public        Boolean   @default(false)
    // Stripe
    stripeCustomerId String?
    // Plan
    plan             Plan      @default(FREE)
    // Socials
    twitter       String?
    instagram     String?
    facebook      String?
    linkedin      String?
    youtube       String?
    tiktok        String?
    github        String?
    discord       String?
    twitch        String?
    // End Socials
    email         String?   @unique
    emailVerified DateTime?
    userRole      UserRole    @default(USER)
    image         String?
    bannedFromPosting Boolean @default(false)
    accounts      Account[]
    sessions      Session[]
    posts         BlogPost[]
    pages         Page[]
    generatedStories Story[]
}

model Newsletter {
    id        Int      @id @default(autoincrement())
    email     String   @unique
    acceptedMarketing Boolean @default(false)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

enum StoryStatus {
    GENERATING
    DONE
    FAILED
}

model Story {
    id String @id @default(cuid())
    prompt String
    status StoryStatus @default(GENERATING)
    // Default to published, but maybe bad reviews stories should be unpublished automatically
    published Boolean @default(true)
    // 
    title String?
    description String?
    keywords String[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    // Contentparts and images should be matched up
    contentParts String[]
    images String[]
    // Votes
    thumbsUp Int @default(0)
    thumbsDown Int @default(0)
    // User who generated the story
    generatedBy User @relation(fields: [generatedById], references: [id])
    generatedById String
}
